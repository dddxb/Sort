// 1.冒泡排序
// 时间复杂度 o(n^2),空间复杂度 o(1)
func BubbleSort(a []int) []int {
	for i:=0;i<len(a)-1;i++ { // 每进行一轮，冒出去一个，不再参与剩余的冒泡
		for j:=len(a)-1;j>i;j-- { // 从后向前，即从下往上冒
			if a[j-1]>a[j] { // 前面的大于后面的需要交换位置
				a[j-1],a[j] = a[j],a[j-1]
			}
		}
	}
	return a
}
/*********************************************************************************************/
// 1.改进的冒泡排序
// 时间复杂度 o(n^2),空间复杂度 o(1)
func BubbleSort2(a []int) []int {
	/* 常规冒泡排序不管经过几次排序后序列已经有序都会一直进行到最后一次
	 * 改进：一旦经过前几次的排序已经有序，即刻停止后面的比较过程，设置
	 * 布尔标记，如果一次循环比较中，布尔值为false，没有发生交换，即停止
	 */
	flag := true
	for i:=0;i<len(a)-1 && flag;i++ {
		flag = false
		for j:=len(a)-1;j>i;j-- {
			if a[j-1] > a[j] {
				a[j-1],a[j] = a[j],a[j-1]
				flag = true
			}
		}
	}
	return a
}
